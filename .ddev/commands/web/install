#!/usr/bin/env bash

usage() {
  echo "Usage: $( basename -- "$0") [-y]"
  echo "  -y: Assume 'yes' as the answer to all prompts and run non-interactively."
  exit 1
}

while test $# != 0
do
    case "$1" in
    -y) ASSUME_YES=1 ;;
    *)  usage ;;
    esac
    shift
done


# If the site is not yet built, build it
if [ ! -d "vendor/" ]; then
  ./.ddev/commands/web/build
fi

cd backend/web || exit 1
DRUSH="../vendor/bin/drush"

# Display a warning before installing the site
printf "\n"
printf "\033[91mâš  WARNING: This installation is meant to be reproducible, meaning that any generated keys will NOT be random. DO NOT USE THIS IN PRODUCTION!\033[0m\n"
printf "\n"

sleep 1

# If the user has passed the -y flag, assume they want to (re)install the site
if [ -n "$ASSUME_YES" ]; then
  IS_SURE="y"
else
  IFS= read -r -p "Are you sure you want to (re)install the site? [y/N] " IS_SURE
fi

# If the user is not sure, exit
if [ "$IS_SURE" != "y" ] && [ "$IS_SURE" != "Y" ]; then
  exit 0
fi

# Create the keys directory if it does not exist
if [ ! -d "../keys" ]; then
  mkdir ../keys
fi

# Generate keys for JWT
head -c 64 /dev/urandom | base64 -w 0 > ../keys/jwt.key.txt

# Install the site
"$DRUSH" site:install minimal -y --site-name="Hackathon" --account-name=root

# Override the site UUID, to fix config imports
"$DRUSH" config:set -y --quiet system.site uuid "82f3bc90-b15e-457f-b40b-795a731e2249"

# Import the site config
"$DRUSH" config:import -y --quiet

# Set the password for the root user
"$DRUSH" user:password root root

# Create a new API user, and generate an API key
"$DRUSH" user:create -y --quiet "GraphQL API"
"$DRUSH" user:role:add -y --quiet api "GraphQL API"
"$DRUSH" sql:query "UPDATE users_field_data SET api_key = \"dqazok5GVgQKBgQD4ZND1HYklxLjKh1dm\" WHERE name='GraphQL API';"

# Rebuild the cache, just in case
"$DRUSH" cache:rebuild --quiet

# Generate a login link
"$DRUSH" user:login
